package a4.Model.gameObjects;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Random;

import a4.Model.ISelectable;
import a4.Model.Point;
/**
 * Weasel movable GameObject
 * @author Andreas
 *
 */
public class Weasel extends MoveableObject implements ISelectable{
	
	private IStrategy curStrategy;
	private IStrategy firstStrategy;
	private IStrategy secondStrategy;
	private boolean choice = true; ///use weasel strategy?

	private Random random = new Random();
	private boolean mark;
	private boolean isSelected;
	private boolean headingFlag = false;
	private AffineTransform myRotation, myTranslation, myScale;
	
	private int speed = random.nextInt(11) + 5;
	
	
	private final int size = 40;
	private int msecCount = 50;
	
	public Weasel(int heading, int posX, int posY, Color newColor){
		
		this.setHeading(heading);
		this.setSpeed(this.speed);
		this.setPointLocation(0, 0);
		super.setColor(newColor);
		
		myRotation = new AffineTransform();
		myTranslation = new AffineTransform();
		myScale = new AffineTransform();
		
		myRotation.rotate(Math.toRadians(90-heading));//maybe
	}
	
	public Rectangle getBounds(){
		return new Rectangle((int) this.getLocationX(),(int)this.getLocationY(),this.size,this.size/2);
	}
	
	
	//Following methods
		//rotate,translate,resetTransform are AT related
		public void rotate(double radians){
			myRotation.rotate(radians);
		}
		
		public void setHeadingFlag(boolean yesNo){
			this.headingFlag = yesNo;
		}
		
		public void translate(double dx,double dy){
			myTranslation.translate(dx,dy);
		}
		
		public void resetTransform(){
			myRotation.setToIdentity();
			myTranslation.setToIdentity();
			myScale.setToIdentity();
		}
		
		public float getLocationX(){
			
			return (float) myTranslation.getTranslateX();
		}
		
		public float getLocationY(){
			
			return (float) myTranslation.getTranslateY();
		}
		
		//Getters for AffineTransform
		//For use in Strategies
		public AffineTransform getMyRotation(){
			return this.myRotation;
		}
		public AffineTransform getMyTranslation(){
			return this.myTranslation;
		}
		public AffineTransform getMyScale(){
			return this.myScale;
		}
	
	
	public int getSize(){
		return this.size;
	}
	
	public void setStrategy(IStrategy newStrategy){
		curStrategy = newStrategy;
	}
	
	public IStrategy getStrategy(){
		return curStrategy;
	}
	
	public void invokeStrategy(int move){
		curStrategy.apply(move);
	}
	
	public void strategyList(IStrategy firstStrategy, IStrategy secondStrategy){
		this.firstStrategy = firstStrategy;
		this.setStrategy(this.firstStrategy);
		this.secondStrategy = secondStrategy;
		
	}
	
	public void  switchStrategy(boolean choice){
		if(choice){
			this.setStrategy(firstStrategy);
		}
		else{
			this.setStrategy(secondStrategy);
		}
	}

	@Override
	public void move(int move) {
		
		
		
		if(msecCount != 0){
			
			this.invokeStrategy(move);
			msecCount--;
		}else{
			choice = !choice;
			this.switchStrategy(choice);
			msecCount = 500;
		}
		
		
	}

	
	//Overriding to prevent access
	public void setColor(Color newColor){
		newColor = null;
	}

	/**
	 * weasel are unfilled rectangles
	 */
	public void draw(Graphics2D g) {
		
		AffineTransform saveAt = g.getTransform();
		
		if(headingFlag){
			this.rotate(Math.toRadians(this.getHeading()));
		}
		this.setHeadingFlag(false);
		
		if(isSelected()){
			
			int R = Math.abs(255 - this.getColor().getRed());
			int G = Math.abs(255 - this.getColor().getGreen());
			int B = Math.abs(255 - this.getColor().getBlue());
			g.setColor(new Color(R,G,B));
			
			g.transform(myTranslation);
			g.transform(myRotation);
			g.transform(myScale);
			g.fillRect(0, 0, size, size/2);
					
		}else{

			g.setColor(this.getColor());
			
			g.transform(myTranslation);
			g.transform(myRotation);
			g.transform(myScale);
			g.drawRect(0,0, size, size/2);
		}
		
		g.setTransform(saveAt);
		
	}

	@Override
	public boolean collidesWith(ICollider otherObject) {
		boolean result = false;
		//if(otherObject instanceof Walls){
			
		//}//ADD STUFF FOR WALL LATER
		
		
		return result;
	}

	@Override
	public void handleCollision(ICollider otherObject) {
		
		
	}

	@Override
	public void addCollisionList(ICollider collobj) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void removeCollision(ICollider obj) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void clearCollisions(ArrayList<ICollider> collList) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayList<ICollider> getCollisionList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setMark(boolean mark) {
		this.mark = mark;
		
	}

	@Override
	public boolean getMark() {
	// TODO Auto-generated method stub
		return this.mark;
	}
	
	

	@Override
	public void setSelected(boolean yesNo) {
		isSelected = yesNo;
		
	}

	@Override
	public boolean isSelected() {
		
		return isSelected;
	}

	@Override
	public boolean contains(Point2D p) {
		Point2D localPoint = null;
		try{
			localPoint = myTranslation.createInverse().transform(p,null);
		}catch(NoninvertibleTransformException e1){
			System.out.println("Error of type: " + e1);
			//localPoint = new Point2D(this.getLocationX(),this.getLocationY());
		}
		
		//mouse selection
		double px =  p.getX();
		double py =  p.getY();
		/**
		//shape location
		int xLoc = (int)this.getLocationX()-(size/2);//keep in mind true center of circle
		int yLoc = (int)this.getLocationY()-(size/4);*/
		
		double xLoc = localPoint.getX()-(size/2);//keep in mind true center of circle
		double yLoc = localPoint.getY()-(size/4);
		
		if((px >= xLoc) && (px <= xLoc+size)
			&& (py >= yLoc && (py <= yLoc+size/2))){System.out.println("Weasel was selected!");return true;}
		else{System.out.println("Weasel was NOT selected!");
			System.out.println("Value of mousePointX: " + px +" mousPointY: "+py);
			System.out.println("Value of localPoint: " + xLoc +" localPointY: "+yLoc);
			;return false;}
		
	}
	

}
