package a4.Model.gameObjects;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;
import java.util.Random;

import a4.Model.IDrawable;

public class Sweeper extends MoveableObject implements IDrawable, ICollider{
	Random random =  new Random();
	private static ArrayList<ICollider> hitList = new ArrayList<ICollider>();
	private int lifetime = 500;
	private int heading = random.nextInt(361);
	private int size = 60;
	private boolean mark;
	private AffineTransform myRotation, myTranslation, myScale;
	
	
	public Sweeper(){
		this.lifetime = 500;
		super.setSpeed(5);
		this.setHeading(heading);
		myRotation = new AffineTransform();
		myTranslation = new AffineTransform();
		myScale = new AffineTransform();
		this.setColor(Color.darkGray);
		this.rotate(90 - this.getHeading());
		
		
	}
	
	
	
	public Rectangle getBounds(){
		return new Rectangle((int) this.getLocationX(),(int)this.getLocationY(),this.size,this.size/2);
	}
	//Following methods
		//rotate,translate,resetTransform are AT related
		public void rotate(double radians){
			myRotation.rotate(Math.toRadians(radians));
		}
		
		public void translate(double dx,double dy){
			myTranslation.translate(dx,dy);
		}
		
		public void resetTransform(){
			myRotation.setToIdentity();
			myTranslation.setToIdentity();
			myScale.setToIdentity();
		}
		
		public void scale(double sx, double sy){
			myScale.scale(sx, sy);
		}
		
		public float getLocationX(){
			
			return (float) myTranslation.getTranslateX();
		}
		
		public float getLocationY(){
			
			return (float) myTranslation.getTranslateY();
		}
		
	

		public void handleCollision(ICollider otherObject) {
			
			otherObject.setMark(true);
			this.removeCollision(otherObject);
			
			
		}

		@Override
		public void addCollisionList(ICollider collobj) {
			this.hitList.add(collobj);
			
		}

		@Override
		public void removeCollision(ICollider collobj) {
			this.hitList.remove(collobj);
			
		}

		@Override
		public ArrayList<ICollider> getCollisionList() {
			// TODO Auto-generated method stub
			return this.hitList;
		}

		@Override
		public void clearCollisions(ArrayList<ICollider> collList) {
			collList.clear();
		}
		

	

		@Override
		public void setMark(boolean mark) {
			this.mark =mark;
			
		}

		@Override
		public boolean getMark() {
			// TODO Auto-generated method stub
			return this.mark;
		}


	/**
	 * Collides with Bird Weasel n SnakeHead
	 * @param otherObject
	 * @return
	 */
	public boolean collidesWith(ICollider otherObject) {
		
		boolean result = false;
		//circle bounding
		//center
		int thisCenterX = (int) this.getLocationX(); 
		int thisCenterY = (int) this.getLocationY(); 
		
		
		
		for(int i = 0; i < this.hitList.size(); i++){
			if(this.hitList.get(i) == otherObject){
				return result;//should be false
			}
		}
		
		
		if(otherObject instanceof Snakes){//not detecting
			if(((Snakes) otherObject).getSnakeHead().getBounds().intersects(this.getBounds())){
				this.addCollisionList(otherObject); result = true; return result;
			}
			
		}
		else if(otherObject instanceof Weasel){
			if(((Weasel) otherObject).getBounds().intersects(this.getBounds())){
				this.addCollisionList(otherObject); result = true; return result;
			}
		}
		else if(otherObject instanceof Birds){
			if(((Birds) otherObject).getBounds().intersects(this.getBounds())){
				this.addCollisionList(otherObject); result = true; return result;
			}
		}
		else{
			result = false;
		}
		
		return result;
	}

	
	
	public void draw(Graphics2D g) {
		AffineTransform saveAt = g.getTransform();
		
		g.setColor(this.getColor()); 
		//APPEND TRANSFORMS
		g.transform(myTranslation);
		g.transform(myRotation);
		g.transform(myScale);
		
		
		g.fillRect(0, 0, this.size/2,this.size );
		
		g.setTransform(saveAt);
	}

	@Override
	public void move(int time) {
		float angle = (90 - this.getHeading());
			
		float deltaX = (int) (Math.cos(Math.toRadians(angle))*this.getSpeed());
		float deltaY = (int) (Math.sin(Math.toRadians(angle))*this.getSpeed());
		
		float newX =  deltaX*(((float)time)/50);
		float newY =  deltaY*(((float)time)/50);
		
		
		this.translate(newX, newY);
	}



	public int getLifetime() {
		return lifetime;
	}



	public void setLifetime(int lifetime) {
		this.lifetime = lifetime;
	}
	
	public void decLifetime(){
		this.lifetime--;
	}
	
	public int getHeading(){
		return this.heading;
	}
	

}
