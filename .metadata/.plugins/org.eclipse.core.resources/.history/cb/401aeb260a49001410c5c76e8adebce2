package a1.gameObjects;
import java.awt.Color;
import java.util.ArrayList;

import a1.Point;

/**
 * 
 * @author Andreas
 *
 */
public class Snakes extends MoveableObject {
	
	private Head snakeHead;
	private int startSize;
	private ArrayList<Integer> bodySegHeading;
	private ArrayList<BodySegment> bodySegPos;
	//private MoveableObject body = new BodySegment();///might need to create array or arraylist
	private Point oldLocation;
	private int newSegCount;
	//Make snake a singleton
	//single global reference to the snake
	private static Snakes theSnake;
	
	//insure that no one can construct a snake directly
	private Snakes(){
		//TODO
	}
	
	private Snakes(int heading, int speed, float posX, float posY, Color newColor){
		this.startSize = 3;
		this.snakeHead = new Head(heading,speed,posX,posY,newColor);
		//this.snakeHead.setHeading(heading);
		this.bodySegPos = new ArrayList<BodySegment>();
		
		//this.setSpeed(speed);
		//this.setPointLocation(posX, posY);
		//this.setColor(newColor);
		
		//fill bodySegment with three blocks
		this.setNewSegCount(this.startSize);
		
		
		
		
	}
	
	
	
	/**
	 * 
	 * @param amount
	 */
	public void addBodySegment(int pos, Point oldLocation){
		
		this.bodySegPos.add(pos, new BodySegment(this.snakeHead.getHeading(),this.snakeHead.getSpeed(),oldLocation.getX(),oldLocation.getY(),this.snakeHead.getColor()));
		
	}
	/**
	 * 
	 */
	public void getCurrentSegHeadings(){
		this.bodySegHeading = new ArrayList<Integer>();
		for(int j = 0; j < this.bodySegPos.size();j++ ){
			this.bodySegHeading.add(j,((BodySegment)bodySegPos.get(j)).getHeading());
		}
		
	}
	
	public void clearCurrentSegHeadings(){
		this.bodySegHeading.clear();
	}

	
	
	
	//provide access to the snake, creating it if necessary
	public static Snakes getSnakes(int heading, int speed, float posX, float posY, Color newColor){
		if(theSnake == null){
			theSnake = new Snakes(heading, speed, posX, posY, newColor);
		}
		return theSnake;
	}
	
	/**
	 * 
	 */
	//CHECK FOR ISSUES, THEY EXISTS!!!!!
	public void move() {
		// TODO Auto-generated method stub
	
		oldLocation = new Point(this.snakeHead.getLocationX(),this.snakeHead.getLocationY());
		
		this.snakeHead.move();
		this.getCurrentSegHeadings();
		if(this.getNewSegCount() != 0){
			this.addBodySegment(0,oldLocation);
			this.decrementNewSegCount();
			
		}
		else{
			//this.getCurrentSegHeadings();
			((BodySegment)this.bodySegPos.get(0)).move();
			((BodySegment)this.bodySegPos.get(0)).setHeading(this.snakeHead.getHeading());
			
			
			for(int i = 1; i < this.bodySegPos.size(); i++){
				//moved segheading after move
				System.out.println("check");
				
				((BodySegment)this.bodySegPos.get(i)).move();
				((BodySegment)this.bodySegPos.get(i)).setHeading(this.bodySegHeading.get(i-1));
			}
			this.clearCurrentSegHeadings();
			
		}
		
		
		
	}
	
	public void changeSnakeHeading(String dir){
		this.snakeHead.changeHeading(dir);
	}

	@Override
	public String toString() {
		String snakeHead = this.snakeHead.toString() +"\n";
		String bodySeg = "";
		for(int s = 0; s < this.bodySegPos.size(); s++){
			bodySeg = bodySeg + ((BodySegment)bodySegPos.get(s)).toString() + "\n";
		}
		
		return snakeHead + bodySeg;
	}

	public int getNewSegCount() {
		return newSegCount;
	}

	public void setNewSegCount(int newSegCount) {
		this.newSegCount = newSegCount;
	}
	
	public void decrementNewSegCount(){
		this.newSegCount = this.newSegCount -1;
	}

	

	

	

}
